apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.r0adkll.deckbuilder"

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.amshove.kluent:kluent:$kluent_version"
    androidTestImplementation "org.amshove.kluent:kluent:$kluent_version"
    androidTestImplementation "com.android.support.test:runner:$runner_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_version"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "io.pokemontcg:pokemon-tcg-sdk-kotlin:$poketcg_version"

    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:cardview-v7:$support_version"
    implementation "com.android.support:preference-v7:$support_version"
    implementation "com.android.support:preference-v14:$support_version"
    implementation "com.android.support:design:$support_version"

    implementation "com.google.firebase:firebase-firestore:$play_version"
    implementation "com.google.firebase:firebase-auth:$play_version"
    implementation "com.google.android.gms:play-services-auth:$play_version"

    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation "nz.bradcampbell:paperparcel:$paperparcel_version"
    implementation "nz.bradcampbell:paperparcel-kotlin:$paperparcel_version"
    kapt "nz.bradcampbell:paperparcel-compiler:$paperparcel_version"

    implementation "com.evernote:android-state:$state_version"
    kapt "com.evernote:android-state-processor:$state_version"

    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxbinding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rxbinding_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rxbinding_version"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rxrelay_version"
    implementation "com.f2prateek.rx.preferences2:rx-preferences:$rxpref_version"

    implementation("com.52inc:52Kit-core:$ftkit_version") {
        exclude group: 'io.reactivex'
    }
    implementation("com.52inc:52Kit-kotlin:$ftkit_version") {
        exclude group: 'io.reactivex'
    }
    implementation "com.52inc:canvasscript:$canvas_version"

    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "com.roughike:bottom-bar:$bottombar_version"
    implementation 'com.nex3z:flow-layout:1.0.0'
    implementation 'org.adw.library:discrete-seekbar:1.0.1' // Remove this
    implementation 'com.sothree.slidinguppanel:library:3.4.0'
    implementation 'com.github.chrisbanes:PhotoView:2.1.3'
}


//task pokePrint {
//    def poke = new Pokemon()
//    def cards = poke.card().where(new Function1<CardQueryBuilder, Unit>() {
//        @Override
//        Unit invoke(CardQueryBuilder cardQueryBuilder) {
//            cardQueryBuilder.pageSize = 1000
//            cardQueryBuilder.setCode = "sm1|sm2|sm3"
//            return null
//        }
//    }).all()
//
//    Collections.shuffle(cards)
//    for (Card card : cards) {
//        println "\"${card.imageUrl}\","
//    }
//}


apply plugin: 'com.google.gms.google-services'